# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM configuration for cloudfront-oidc-auth function
Parameters:
  OriginBucketName:
    Type: String
    Description: The name of the Static Content S3 Bucket (will be created)
  LogBucketName:
    Type: String
    Description: The name of the Log Content S3 Bucket (will be created)
  OidcSecretName:
    Type: String
    Description: The name of the Secret in Secrets manager for the OIDC configuaration (must exist)
  AlternateDomainName:
    Type: String
    Description: The alternate domain name
    Default: AWS::NoValue
  CustomCertificateArn:
    Type: String
    Description: Resource ARN of a custom certificate
    Default: AWS::NoValue
  MinimumTLSVersion:
    Type: String
    Description: The minimum version to use for CloudFront TLS
    Default: TLSv1.2_2018
Resources:
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      AccessControl: LogDeliveryWrite
      BucketName: !Ref LogBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  OriginBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref OriginBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 'accessLogs/'
  ReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OriginBucket
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${OriginBucket}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref OriginBucket
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref AlternateDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CustomCertificateArn
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: !Ref MinimumTLSVersion
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies : 'true'
          Prefix: 'cloudfront/'
        Enabled: 'true'
        Origins:
        - DomainName: !GetAtt OriginBucket.DomainName
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Comment: 'OpenID Connect authentication and authorization function for ${}'
        DefaultRootObject: 'index.html'
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !Ref CloudFrontAuthFunction.Version
          ForwardedValues:
            QueryString: 'false'
            Headers:
            - Origin
            Cookies:
              Forward: none
          ViewerProtocolPolicy: 'redirect-to-https'
  CloudFrontAuthFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: !Sub 'cloudfront-auth-${AWS::StackName}'
        CodeUri: src/js/
        Role: !GetAtt LambdaEdgeFunctionRole.Arn
        Runtime: nodejs14.x
        Handler: auth.handle
        Timeout: 5
        AutoPublishAlias: LIVE
  LambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
        Path: '/'
        ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
        - PolicyName: !Sub 'lambda-auth-${AWS::StackName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'secretsmanager:GetResourcePolicy'
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:ListSecretVersionIds'
              Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OidcSecretName}*'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'AllowLambdaServiceToAssumeRole'
              Effect: 'Allow'
              Action:
              - 'sts:AssumeRole'
              Principal:
                Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
        RoleName: !Sub 'lambda-edge-${AWS::StackName}'
Outputs:
  CloudFrontAuthFunction:
    Description: Lambda@Edge CloudFront Auth Function ARN
    Value: !GetAtt CloudFrontAuthFunction.Arn
  CloudFrontAuthFunctionVersion:
    Description: Lambda@Edge CloudFront Auth Function ARN with Version
    Value: !Ref CloudFrontAuthFunction.Version
